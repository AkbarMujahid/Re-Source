/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data and allows public read access for shared resources, while restricting unauthorized modifications.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /listings/{listingId}: Stores academic resource listings, publicly readable, but with owner-only write access based on the 'userId' field.
 * - /chat_messages/{chatMessageId}: Stores chat messages. (No rules at this stage)
 * - /users/{userId}/wishlists/{wishlistId}: Stores user wishlists, accessible only to the owning user.
 * - /reports/{reportId}: Stores user-submitted reports for listings. (No rules at this stage)
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Listings are publicly readable, but only the owner can modify or delete them.  The 'userId' field within the listing document is used to determine ownership.
 * - Listing of the `/users` collection is explicitly denied.
 * - Wishlists are private and accessible only to their owner.
 *
 * Denormalization for Authorization:
 * - The 'listings' collection denormalizes the 'userId' to allow simple ownership checks.
 *
 * Structural Segregation:
 * - User-specific wishlists are stored in a subcollection under the user's document to ensure private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User "xqBCK8gcsgQGfVFFan33QsQAqlC3" can create their own profile.
     * @allow (get, update, delete) - User "xqBCK8gcsgQGfVFFan33QsQAqlC3" can get, update, and delete their own profile.
     * @deny (create) - User "randomUserId" cannot create a profile with ID "xqBCK8gcsgQGfVFFan33QsQAqlC3".
     * @deny (get, update, delete) - User "randomUserId" cannot get, update, or delete the profile of user "xqBCK8gcsgQGfVFFan33QsQAqlC3".
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to academic resource listings. Listings are publicly readable, but only the owner can modify or delete them.
     * @path /listings/{listingId}
     * @allow (get, list) - Any user can read any listing.
     * @allow (create) - User "xqBCK8gcsgQGfVFFan33QsQAqlC3" can create a listing with userId "xqBCK8gcsgQGfVFFan33QsQAqlC3".
     * @allow (update, delete) - User "xqBCK8gcsgQGfVFFan33QsQAqlC3" can update or delete their own listing.
     * @deny (create) - User "randomUserId" cannot create a listing with userId "xqBCK8gcsgQGfVFFan33QsQAqlC3".
     * @deny (update, delete) - User "randomUserId" cannot update or delete a listing owned by "xqBCK8gcsgQGfVFFan33QsQAqlC3".
     * @principle Allows public read access while enforcing document ownership for writes.
     */
    match /listings/{listingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(resourceUserId) {
        return isSignedIn() && request.auth.uid == resourceUserId;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }

    /**
     * @description Controls access to chat messages. No specific rules are defined at this stage.
     * @path /chat_messages/{chatMessageId}
     * @allow (get, list, create, update, delete) - No access granted by default.
     * @principle Placeholder for future chat message security rules.
     */
    match /chat_messages/{chatMessageId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user wishlists. Users can only read and write their own wishlists.
     * @path /users/{userId}/wishlists/{wishlistId}
     * @allow (create) - User "xqBCK8gcsgQGfVFFan33QsQAqlC3" can create a wishlist under their own user ID.
     * @allow (get, list, update, delete) - User "xqBCK8gcsgQGfVFFan33QsQAqlC3" can get, list, update, and delete their own wishlist.
     * @deny (create) - User "randomUserId" cannot create a wishlist under the user ID "xqBCK8gcsgQGfVFFan33QsQAqlC3".
     * @deny (get, list, update, delete) - User "randomUserId" cannot get, list, update, or delete the wishlist of user "xqBCK8gcsgQGfVFFan33QsQAqlC3".
     * @principle Enforces document ownership for wishlists using path-based authorization.
     */
    match /users/{userId}/wishlists/{wishlistId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to reports. No specific rules are defined at this stage.
     * @path /reports/{reportId}
     * @allow (get, list, create, update, delete) - No access granted by default.
     * @principle Placeholder for future report security rules.
     */
    match /reports/{reportId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}
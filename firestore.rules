/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *   allowing users to manage their profiles and wishlists. Public read access is granted
 *   for listings, while ownership is enforced for creating, updating, and deleting them.
 *   The rules prioritize security and data integrity, with specific checks to prevent
 *   unauthorized access and modifications.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; only the owner can read or write.
 * - /listings/{listingId}: Stores listing data; publicly readable but owner-only write access.
 * - /chat_messages/{chatMessageId}: Stores chat messages; no specific rules are enforced here.
 * - /users/{userId}/wishlists/{wishlistId}: Stores wishlists; only the owner can read or write.
 * - /reports/{reportId}: Stores reports; no specific rules are enforced here.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Read-only collections are handled with `allow get, list: if true;`.
 * - All write operations are strictly controlled via ownership checks or other authorization mechanisms.
 * - Admin privileges are not considered in this simplified ruleset.
 *
 * Denormalization for Authorization:
 * - Listings denormalize the `userId` to allow for efficient ownership checks without extra reads.
 *
 * Structural Segregation:
 * - No explicit segregation of public/private data is used beyond public read for listings.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile.
     * @deny (get, create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to listing documents.
     * @path /listings/{listingId}
     * @allow (get, list) to anyone.
     * @allow (create) if the user is authenticated and the listing's userId matches their auth UID.
     * @allow (update, delete) if the user is the owner of the listing.
     * @deny (create, update, delete) if the user is not the owner of the listing.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /listings/{listingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to chat message documents.
     * @path /chat_messages/{chatMessageId}
     * @allow get, list, create, update, delete: if false;
     * @principle No specific rules are enforced for chat messages in this prototype.
     */
    match /chat_messages/{chatMessageId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to wishlist documents.
     * @path /users/{userId}/wishlists/{wishlistId}
     * @allow (get, create, update, delete) if the user is the owner of the wishlist.
     * @deny (get, create, update, delete) if the user is not the owner of the wishlist.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/wishlists/{wishlistId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to report documents.
     * @path /reports/{reportId}
     * @allow get, list, create, update, delete: if false;
     * @principle No specific rules are enforced for reports in this prototype.
     */
    match /reports/{reportId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    //----------------------------------------------------------------------------------------------
    // Helper Functions
    //----------------------------------------------------------------------------------------------

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

        /**
     * @description Checks if the user is the existing owner of the resource.
     * @param userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && request.auth.uid == userId && resource != null;
    }
  }
}
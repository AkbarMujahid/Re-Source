rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-level access control for user profiles. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's UID matches the userId in the path.
     * @deny (get, create, update, delete) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.auth.uid == userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to listings but restricts write access to the listing owner.
     * @path /listings/{listingId}
     * @allow (get, list) any authenticated or unauthenticated user.
     * @allow (create) only if the userId field in the request matches the authenticated user's UID.
     * @allow (update, delete) only if the user is the owner of the listing.
     * @deny (create) if the userId field in the request does not match the authenticated user's UID.
     * @deny (update, delete) if the user is not the owner of the listing.
     * @principle Implements public read with owner-only writes, validating ownership on write operations.
     */
    match /listings/{listingId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Enforces participant-based access control for conversations. Only participants can read and write conversation data.
     * @path /conversations/{conversationId}
     * @allow (get, list) if the user's UID is in the participants array.
     * @allow (create, update, delete) if the user's UID is in the participants array.
     * @deny (get, list) if the user's UID is not in the participants array.
     * @deny (create, update, delete) if the user's UID is not in the participants array.
     * @principle Implements shared access based on a participants array within the document.
     */
    match /conversations/{conversationId} {
      function isParticipant() {
        return request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
      }

      allow get: if request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
      allow list: if false;
      allow create: if request.auth != null && request.resource.data.participants.hasAny([request.auth.uid]);
      allow update: if request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
      allow delete: if request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
    }

    /**
     * @description Enforces participant-based access control for chat messages within a conversation. Only participants can read and write messages.
     * @path /conversations/{conversationId}/messages/{messageId}
     * @allow (get, list) if the user is a participant in the parent conversation.
     * @allow (create, update, delete) if the user is a participant in the parent conversation.
     * @deny (get, list) if the user is not a participant in the parent conversation.
     * @deny (create, update, delete) if the user is not a participant in the parent conversation.
     * @principle Implements shared access for subcollections based on a participants array in the parent document.
     */
    match /conversations/{conversationId}/messages/{messageId} {
        function isParticipant() {
            return get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
        }
        allow get: if request.auth != null && isParticipant();
        allow list: if false;
        allow create: if request.auth != null && isParticipant();
        allow update: if request.auth != null && isParticipant();
        allow delete: if request.auth != null && isParticipant();
    }

    /**
     * @description Enforces user-level access control for wishlists. Only the user can read or write their own wishlist.
     * @path /users/{userId}/wishlists/{wishlistId}
     * @allow (get, create, update, delete) if the user's UID matches the userId in the path.
     * @deny (get, create, update, delete) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wishlists/{wishlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.auth.uid == userId;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows any authenticated user to create, read, update, or delete reports.
     * @path /reports/{reportId}
     * @allow (get, list, create, update, delete) any authenticated user.
     * @principle Open read and write access for reports
     */
    match /reports/{reportId} {
      allow get, list, create, update, delete: if request.auth != null;
    }
  }
}
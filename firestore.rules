/**
 * @file Firebase Security Rules for the Re-Source application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-specific data (e.g., wishlists) and allows public read access with owner-only writes for listings.
 * Database-wide admin privileges are given to the user with uid xqBCK8gcsgQGfVFFan33QsQAqlC3.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /listings/{listingId}: Stores academic resource listings.
 * - /chat_messages/{chatMessageId}: Stores chat messages.
 * - /users/{userId}/wishlists/{wishlistId}: Stores user wishlists.
 * - /recommendations/{recommendationId}: Stores personalized resource recommendations.
 *
 * Key Security Decisions:
 * - Listings are publicly readable but only editable by the owner.
 * - Wishlists are private to the user.
 * - No user listing is allowed (to prevent unauthorized access to user data).
 *
 * Denormalization for Authorization:
 * - Listings: Each listing stores the userId of its creator for direct ownership checks, avoiding expensive `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants database-wide admin privileges to xqBCK8gcsgQGfVFFan33QsQAqlC3.
     * @path /admin_panel
     * @allow (read, write, create, update, delete) User with uid xqBCK8gcsgQGfVFFan33QsQAqlC3 can perform any operation.
     * @deny (read, write, create, update, delete) Any other user cannot perform any operation.
     * @principle Enforces admin-only access.
     */
    match /admin_panel {
        allow get, list, create, update, delete: if request.auth.uid == 'xqBCK8gcsgQGfVFFan33QsQAqlC3';
    }

    /**
     * @description Manages user profiles. Allows a user to create their own profile and restricts modifications to the profile owner.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their profile if the userId matches their auth UID.
     * @allow (get) Authenticated user can get their profile if the userId matches their auth UID.
     * @allow (update, delete) Authenticated user can update or delete their profile if the userId matches their auth UID.
     * @deny (create) Authenticated user cannot create a profile with a userId that does not match their auth UID.
     * @deny (get, update, delete) Authenticated user cannot get, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // No user listing allowed.

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages academic resource listings. Allows public read access but restricts write access to the listing owner.
     * @path /listings/{listingId}
     * @allow (get, list) Any user can read listings.
     * @allow (create) Authenticated user can create a listing if the userId matches their auth UID.
     * @allow (update, delete) Authenticated user can update or delete their listing if the userId matches the listing's userId.
     * @deny (create) Authenticated user cannot create a listing with a userId that does not match their auth UID.
     * @deny (update, delete) Authenticated user cannot update or delete another user's listing.
     * @principle Allows public read access with owner-only writes.
     */
    match /listings/{listingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && isExistingOwner(resource.data.userId);
      allow delete: if request.auth != null && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Manages chat messages exchanged between users.
     * @path /chat_messages/{chatMessageId}
     * @allow (create) Any authenticated user can create a chat message.
     * @allow (get, list) Any user can read chat messages.
     * @allow (update, delete) No one can update or delete messages
     */
    match /chat_messages/{chatMessageId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    /**
     * @description Manages user wishlists. Allows a user to manage their own wishlists, and restricts access to the wishlist owner.
     * @path /users/{userId}/wishlists/{wishlistId}
     * @allow (create) Authenticated user can create their wishlist if the userId matches their auth UID.
     * @allow (get, list) Authenticated user can get and list their wishlists if the userId matches their auth UID.
     * @allow (update, delete) Authenticated user can update or delete their wishlist if the userId matches their auth UID.
     * @deny (create) Authenticated user cannot create a wishlist with a userId that does not match their auth UID.
     * @deny (get, list, update, delete) Authenticated user cannot get, list, update, or delete another user's wishlist.
     * @principle Enforces document ownership for wishlists.
     */
    match /users/{userId}/wishlists/{wishlistId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages personalized resource recommendations for users.
     * @path /recommendations/{recommendationId}
     * @allow (get, list) Any user can read the recommendations
     * @allow (create) Any authenticated user can create a recommendation.
     * @allow (update, delete) No one can update or delete recommendations.
     */
    match /recommendations/{recommendationId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }
  }
}
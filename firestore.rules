/**
 * @fileOverview Firestore Security Rules for the Re-Source application.
 *
 * Core Philosophy:
 * Enforces strict user-ownership for user-specific data while allowing public read access to listings.
 * Admins are managed through the /roles_admin collection or auth token.
 *
 * Data Structure:
 * - /users/{userId}: User profiles.
 * - /listings/{listingId}: Resource listings with userId field.
 * - /chat_messages/{chatMessageId}: Chat messages.
 * - /users/{userId}/wishlists/{wishlistId}: User wishlists.
 * - /recommendations/{recommendationId}: Resource recommendations.
 * - /reports/{reportId}: Reports of inappropriate content.
 * - /roles_admin/{userId}: Document existence indicates admin status.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // -------------------- MODIFIED isAdmin() --------------------
    function isAdmin() {
      // Check token first
      let tokenAdmin = request.auth.token.isAdmin == true;

      // Check roles_admin collection
      let collectionAdmin = exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));

      // Return true if either method says admin
      return isSignedIn() && (tokenAdmin || collectionAdmin);
    }

    // -------------------- USERS --------------------
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    // -------------------- LISTINGS --------------------
    match /listings/{listingId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    // -------------------- CHAT MESSAGES --------------------
    match /chat_messages/{chatMessageId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    // -------------------- WISHLISTS --------------------
    match /users/{userId}/wishlists/{wishlistId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    // -------------------- RECOMMENDATIONS --------------------
    match /recommendations/{recommendationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // -------------------- REPORTS --------------------
    match /reports/{reportId} {
      allow create: if isSignedIn();
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // -------------------- ROLES_ADMIN --------------------
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }
  }
}

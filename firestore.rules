/**
 * @fileOverview Firestore Security Rules for the Re-Source application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and
 * leverages denormalization to optimize authorization checks.  Admin privileges
 * are granted based on the existence of a document in the `roles_admin` collection.
 * Public read access is not enabled for any collections by default.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles, accessible only to the user themselves.
 * - `/listings/{listingId}`: Stores resource listings.  Writes are restricted to the owner (based on the `userId` field).
 * - `/chat_messages/{chatMessageId}`: Stores chat messages.  No specific access controls are defined beyond authentication.
 * - `/users/{userId}/wishlists/{wishlistId}`: Stores user wishlists, accessible only to the user themselves.
 * - `/recommendations/{recommendationId}`: Stores resource recommendations.  No specific access controls are defined beyond authentication.
 * - `/reports/{reportId}`: Stores reports of inappropriate content. No specific access controls are defined beyond authentication.
 * - `/roles_admin/{userId}`: Presence in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Data validation is relaxed during this prototyping phase, focusing on authorization.
 * - Admin privileges are determined by document existence in the `roles_admin` collection.
 *
 * Denormalization for Authorization:
 * - Listings include a `userId` field to enable ownership-based access control without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document.
     * Ensures the document exists and the user is the owner.
     * @param {string} userId The user ID to compare against the request's auth UID and the document's user ID.
     * @returns {boolean} True if the document exists and the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && resource != null && request.auth.uid == userId;
    }
    
    /**
     * @description Checks if the user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) If the authenticated user's UID matches the userId.
     * @deny (create) If the authenticated user's UID does not match the userId.
     * @allow (get, list, update, delete) If the authenticated user's UID matches the userId.
     * @deny (get, list, update, delete) If the authenticated user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Read rules:
      allow get: if isOwner(userId);
      allow list: if false;

      // Write rules:
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for resource listings.
     * @path /listings/{listingId}
     * @allow (get, list) Public read access.
     * @allow (create) If the authenticated user's UID matches the listing's userId.
     * @deny (create) If the authenticated user's UID does not match the listing's userId.
     * @allow (update, delete) If the authenticated user's UID matches the listing's userId.
     * @deny (update, delete) If the authenticated user's UID does not match the listing's userId or if the listing doesn't exist.
     * @principle Enforces document ownership for writes.
     */
    match /listings/{listingId} {
      // Read rules:
      allow get: if true;
      allow list: if true;

      // Write rules:
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Security rules for chat messages.
     * @path /chat_messages/{chatMessageId}
     * @allow (get, list, create) If the user is signed in.
     * @deny (get, list, create) If the user is not signed in.
     * @allow (update, delete) Never allow general updates or deletes.
     * @principle Requires authentication for reads and writes.
     */
    match /chat_messages/{chatMessageId} {
      // Read rules:
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Write rules:
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for user wishlists.
     * @path /users/{userId}/wishlists/{wishlistId}
     * @allow (create, get, list, update, delete) If the authenticated user's UID matches the userId.
     * @deny (create, get, list, update, delete) If the authenticated user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wishlists/{wishlistId} {
      // Read rules:
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules:
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for resource recommendations.
     * @path /recommendations/{recommendationId}
     * @allow (get, list, create) If the user is signed in or if the user is an admin
     * @deny (get, list, create) If the user is not signed in.
     * @allow (update, delete) Only admins can update or delete recommendations
     * @principle Requires authentication for reads and writes.
     */
    match /recommendations/{recommendationId} {
      // Read rules:
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();

      // Write rules:
      allow create: if isSignedIn() || isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for reports of inappropriate content.
     * @path /reports/{reportId}
     * @allow (get, list, create) If the user is signed in.
     * @deny (get, list, create) If the user is not signed in.
     * @allow (update, delete) Only admins can update or delete reports.
     * @principle Requires authentication for reads and writes.
     */
    match /reports/{reportId} {
      // Read rules:
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();

      // Write rules:
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Security rules for admin status, based on document existence.
      * @path /roles_admin/{userId}
      */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false; // Prevent listing of all admins

        allow create: if isAdmin();
        allow update: if false; // Prevent updates for admin role assignment
        allow delete: if isAdmin();
    }
  }
}